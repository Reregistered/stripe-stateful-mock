import Stripe from "stripe";
import { generateId } from "./utils";
import log = require("loglevel");

export namespace invoices {
  export function upcoming(
    accountId: string,
    params: Stripe.InvoiceRetrieveUpcomingParams
  ): Stripe.Invoice {
    log.debug("invoice.upcoming", accountId, params);

    const invoice: Stripe.Invoice = {
      id: `il_tmp_ ${generateId()}`,
      object: "invoice",
      account_country: "US",
      account_name: "Toric",
      account_tax_ids: null,
      amount_due: 9000,
      amount_paid: 0,
      amount_remaining: 9000,
      application: null,
      application_fee_amount: null,
      attempt_count: 0,
      attempted: false,
      automatic_tax: {
        enabled: false,
        status: null,
      },
      billing_reason: "manual",
      charge: null,
      collection_method: "charge_automatically",
      created: 1698299603,
      currency: "usd",
      custom_fields: null,
      customer: "cus_M84TegnMUe7Ilv",
      customer_address: null,
      customer_email: "conover.j@gmail.com",
      customer_name: "Jared 3's organization",
      customer_phone: null,
      customer_shipping: null,
      customer_tax_exempt: "none",
      customer_tax_ids: [],
      default_payment_method: null,
      default_source: null,
      default_tax_rates: [],
      description: null,
      discount: null,
      discounts: [],
      due_date: null,
      ending_balance: null,
      footer: null,
      last_finalization_error: null,
      lines: {
        object: "list",
        data: [
          {
            id: "il_1O5MVTGcu70d2bEjrjuOmajI",
            object: "line_item",
            amount: 9000,
            currency: "usd",
            description: "My First Invoice Item (created for API docs)",
            discount_amounts: [],
            discountable: true,
            discounts: [],
            invoice_item: "ii_1O5MVTGcu70d2bEjwzxdSWBt",
            livemode: false,
            metadata: {},
            period: {
              end: 1698299603,
              start: 1698299603,
            },
            price: {
              id: "price_1O5KHb2eZvKYlo2CK1VlFNAg",
              object: "price",
              active: true,
              billing_scheme: "per_unit",
              created: 1698291055,
              currency: "usd",
              livemode: false,
              lookup_key: null,
              metadata: {},
              nickname: null,
              product: "prod_Ot6UHdixPegm9n",
              recurring: null,
              tax_behavior: "unspecified",
              tiers_mode: null,
              transform_quantity: null,
              type: "one_time",
              unit_amount: 9000,
              unit_amount_decimal: "9000",
            },
            proration: false,
            proration_details: {
              credited_items: null,
            },
            plan: null,
            quantity: 1,
            subscription: null,
            tax_amounts: [],
            tax_rates: [],
            type: "invoiceitem",
          },
        ],
        has_more: false,
        url: "/v1/invoices/upcoming/lines?customer=cus_M84TegnMUe7Ilv",
      },
      livemode: false,
      metadata: {},
      next_payment_attempt: null,
      number: null,
      on_behalf_of: null,
      paid: false,
      paid_out_of_band: false,
      payment_intent: null,
      payment_settings: {
        payment_method_options: null,
        payment_method_types: null,
      },
      period_end: 1698299603,
      period_start: 1698299603,
      post_payment_credit_notes_amount: 0,
      pre_payment_credit_notes_amount: 0,
      quote: null,
      receipt_number: null,
      starting_balance: 0,
      statement_descriptor: null,
      status: "draft",
      status_transitions: {
        finalized_at: null,
        marked_uncollectible_at: null,
        paid_at: null,
        voided_at: null,
      },
      subscription: null,
      subtotal: 9000,
      tax: null,
      test_clock: null,
      total: 9000,
      total_discount_amounts: [],
      total_tax_amounts: [],
      transfer_data: null,
      webhooks_delivered_at: null,
    };

    return invoice;
  }
}
